import './App.css'
import {useEffect, useState} from "react";

// const tasks = [
//     {
//         id: 1,
//         title: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é",
//         isDone: false,
//         addedAt: "1 —Å–µ–Ω—Ç—è–±—Ä—è",
//         priority: 2,
//     },
//     {
//         id: 2,
//         title: "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã",
//         isDone: true,
//         addedAt: "2 —Å–µ–Ω—Ç—è–±—Ä—è",
//         priority: 0,
//     },
//     {
//         id: 3,
//         title: "–°—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
//         isDone: false,
//         addedAt: "3 —Å–µ–Ω—Ç—è–±—Ä—è",
//         priority: 1,
//     },
//     {
//         id: 4,
//         title: "–°—Ä–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –æ—Ç—á–µ—Ç",
//         isDone: false,
//         addedAt: "4 —Å–µ–Ω—Ç—è–±—Ä—è",
//         priority: 4,
//     },
//     {
//         id: 5,
//         title: "–ó–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
//         isDone: false,
//         addedAt: "3 —Å–µ–Ω—Ç—è–±—Ä—è",
//         priority: 3,
//     },
// ]
const KEY_API = 'none';

function App() {

    const [tasks, setTasks] = useState(null)
    const [selectedTaskId, setSelectedTaskId] = useState(null);
    const [selectedTask, setSelectedTask] = useState(null);

    useEffect(() => {
        fetch('https://trelly.it-incubator.app/api/1.0/boards/tasks', {
            headers: {
                'api-key': KEY_API
            }
        })
            .then(resp => resp.json())
            .then(data => setTasks(data.data));
    }, []);
    useEffect(() => {
        if (!selectedTaskId) {
            return;
        }

        function getData(currentTask) {
            fetch(`https://trelly.it-incubator.app/api/1.0/boards/${currentTask.attributes.boardId}/tasks/${currentTask.id}`, {
                headers: {
                    'api-key': KEY_API
                }
            }).then(resp => resp.json())
                .then(data => setSelectedTask(data.data));
        }

        const findTask = tasks.find(task => task.id === selectedTaskId);
        getData(findTask)
    }, [selectedTaskId]);

    if (tasks === null) {
        return <h2>–ó–∞–≥—Ä—É–∑–∫–∞...üì°</h2>
    } else if (tasks.length === 0) {
        return <h2>–ï—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á üéÉ</h2>
    }

    return (
        <div className={'main-container'}>
            <div className='main-container-tasks'>
                <button className='reset-btn' onClick={() => {
                    setSelectedTaskId(null);
                    setSelectedTask(null);
                }}>–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                </button>
                {
                    tasks.map(task => {
                        function getPriorityClass(priority: number) {
                            switch (priority) {
                                case 0:
                                    return 'low-priority';
                                case 1:
                                    return 'medium-priority';
                                case 2:
                                    return 'high-priority';
                                case 3:
                                    return 'urgent-priority';
                                case 4:
                                    return 'highest-priority';
                                default:
                                    return '';
                            }
                        }

                        const classTitle = `task-title ${task.isDone ? 'line-through' : ''}`;
                        const backgroundTask =
                            `task-self-container ${getPriorityClass(task.attributes.priority)} ${selectedTaskId === task.id ? 'border-blue' : ''}`;

                        return (
                            <div key={task.id} className={backgroundTask} onClick={() => {
                                //alert(task.id) // –∑–∞–¥–∞–Ω–∏–µ 1
                                setSelectedTaskId(task.id); //–∑–∞–¥–∞–Ω–∏–µ 2
                            }}>
                                <span className='task-main-title'>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</span>
                                <span className={classTitle}>{task.attributes.title}</span>
                                <br/>
                                <span className='task-status'>–°—Ç–∞—Ç—É—Å: </span>
                                <input type="checkbox" checked={task?.isDone}/>
                                <br/>
                                <span className='task-title-date'>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: </span>
                                <span className='task-start-date'>{task.attributes.addedAt}</span>
                            </div>
                        )
                    })
                }
            </div>
            <div className={'main-container-task-details'}>
                <h2>üëÄ Task details:</h2>
                {!selectedTaskId && '–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ üò¢.'}
                {selectedTaskId && selectedTask.id !== selectedTaskId && <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á–∏ üé≤</div>}
                {selectedTask.id === selectedTaskId  && (
                    <div>
                        <p>–ó–∞–¥–∞—á–∞:   <span>{selectedTask?.attributes.title}</span></p>
                        <p>–î–æ—Å–∫–∞:    <span>{selectedTask?.attributes.boardTitle}</span></p>
                        <p>–û–ø–∏—Å–∞–Ω–∏–µ: <span>{selectedTask?.attributes.description || '–ü—É—Å—Ç–æ'}</span></p>
                    </div>
                )}
            </div>
        </div>
    )
}

export default App
